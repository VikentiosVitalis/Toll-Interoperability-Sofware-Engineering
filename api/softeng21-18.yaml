openapi: 3.0.0
info:
  version: 1.0.0
  title: Softeng 21-18 Toll Interoperability API
  description: REST API supporting the function of an interoperability
    system for highway toll stations. Created for the purposes of the
    term project of the Software Engineering course (7th Semester, NTUA).
servers:
  - url: https://localhost:91003/interoperability/api
    description: Development server

paths:
  /login:
    post:
      description: > 
        Post user login credentials (inputted by user in the login form) 
        and perform identification.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/username_password'
      
      responses:
        200:
          description: Succesful identification
          content:
           application/json:
            schema:
             type: object
             properties:
              token:
                type: string
                description: The user's authentication token
                example: 
                  $ref: '#/components/examples/authToken'
        400:
          description: Invalid username or password
        402:
          description: No user found with given credentials
        500:
          description: Internal server error
  
  /logout:
    post:
      description: Perform user logout
      parameters:
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: Succesful logout
        500:
          description: Internal server error
  
  /admin/usermod/:
    post:
      description: Add new user or change password of existing user
      parameters:
        - $ref: '#/components/parameters/customHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username_password'
      responses:
        200:
          description: >
            User added or password changed succesfully. The new
            credentials of the user are returned.
          content:
           application/json:
            schema:
             $ref: '#/components/schemas/username_password'
        400:
          description: Invalid username or password
        401:
          description: Unauthorised admin
        500:
          description: Internal server error


  /admin/users/{username}:
    get:
      description: Get data of user with given username
      parameters:
        - name: username
          in: path
          required: true
          description: Username of user whose data should be fetched
          schema:
            type: string
            example: "RandomUser"
        - $ref: '#/components/parameters/customHeader'
      
      responses:
        200:
          description: Succesful fetch of user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/username_password_email'
        400:
          description: Invalid username
        401:
          description: Unauthorised admin
        402:
          description: User with requested username not found
        500:
          description: Internal server error
  
  /admin/system/passesupd:
    post:
      description: >
        Post a CSV file containing the pass records from a single
        toll gate station.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: text/csv
    
      responses:
        200:
          description: >
            Succesful post of CSV file and importation of new pass records.
          content:
            application/json:
              schema:
                type: object
                properties:
                  PassesInUploadedFile:
                    type: integer
                    example: 572
                  PassesImported:
                    type: integer
                    example: 563
                  TotalPassesInDatabase:
                    type: integer
                    example: 8731
        400:
          description: Invalid file uploaded
        401:
          description: Unauthorised admin
        500:
          description: Internal server error

  /admin/healthcheck:
    get:
      description: Check end-to-end connectivity (between user and database)

      responses:
        200:
          description: Healthcheck successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: >
                      If end-to-end connectivity is established, return "OK",
                      otherwise return "failed".
                    type: string
                    enum: ["OK", "failed"]
                  dbconnection:
                    type: string
                    example: "..."
        500:
          description: Internal server error


  /admin/resetpasses:
    post:
      description: >
        Deletes all pass records from the database and resets 
        the administrator account to default (username: admin, 
        password: freepasses4all).

      responses:
        200:
          description: >
            Succesful deletion of pass records and reset of 
            default administrator account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_ok'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_failed'


  /PassesPerStation/{stationID}/{date_from}/{date_to}:
    get:
      description: >
        Fetch a list of passes that were recorded between specified dates,
        on station with given ID. The passes are returned in ascending time order.
      parameters:
        - name: stationID
          in: path
          required: true
          description: ID of station for which passes will be fetched.
          schema:
            type: string
            example: "AO17"
        - $ref: '#/components/parameters/dateFromParam'
        - $ref: '#/components/parameters/dateToParam'
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'

      responses:
        200: 
          description: Return list with analytic data for the passes in the specific given time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passesPerStation'
            text/csv:
              schema:
                $ref: '#/components/schemas/passesPerStation'
        400:
          description: Invalid time period or station id
        401:
          description: Unauthorised user
        402:
          description: No records found with the requested parameters
        500:
          description: Internal server error          


  /PassesAnalysis/{op1_ID}/{op2_ID}/{date_from}/{date_to}:
    get:
      description: >
        Fetch a list of passes that were recorded between specified dates,
        on stations of operator {op1_ID}, in which a tag of operator {op2_ID} 
        was used. The passes are returned in ascending time order.
      parameters:
        - name: op1_ID
          in: path
          required: true
          description: > 
            The ID of the owner of the station for which the pass
            records will be fetched.
          schema:
            type: string
            example: "AO"
        - name: op2_ID
          in: path
          required: true
          description: >
            The ID of the owner of the tags for which the pass records
            will be fetched.
          schema:
            type: string
            example: "EO"
        - $ref: '#/components/parameters/dateFromParam'
        - $ref: '#/components/parameters/dateToParam'
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'
      
      responses:
        200:
          description: Succesful fetch of pass record information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passesAnalysis'
            text/csv:
              schema:
                $ref: '#/components/schemas/passesAnalysis'
                
        400:
          description: Invalid input parameters (operator IDs or dates)
        401:
          description: Unauthorised user
        402:
          description: No records found with the requested parameters
        500:
          description: Internal server error
                          

components:
  examples:
    authToken: 
      value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlJhbmRvbVVzZXIiLCJlbWFpbCI6InJhbmRvbUB1c2VyLmNvbSIsImlhdCI6MTUxNjIzOTAyMn0.VFq_QK6pzjNvKpm0ju_gbOjB3u3dMjs7EZcUCvSH-Os"

  parameters:
    dateFromParam:
      name: date_from
      in: path
      required: true
      description: The earliest date of pass records to be fetched in YYYYMMDD format.
      schema:
        type: string
        example: "20200718"

    dateToParam:
      name: date_to
      in: path
      required: true
      description: The latest date of pass records to be fetched in YYYYMMDD format.
      schema:
        type: string
        example: "20200818"

    formatParam:
      name: format
      in: query
      description: The data format of the response content.
      schema:
        type: string
        enum: ["json", "csv"]
        default: "json"
    
    customHeader:
      name: X-OBSERVATORY-AUTH
      in: header
      required: true
      description: >
        Custom HTTP header to be sent on each authorised operation.
        Contains the user's authentication token, as returned from the
        login operation.
      schema:
        type: string
        example:
          $ref: '#/components/examples/authToken'

  schemas:
    username_password:
      type: object
      properties:
        username:
          type: string
          example: "RandomUser"
        password:
          type: string
          example: "foobar123!"
    
    username_password_email:
      type: object
      properties:
        username:
          type: string
          example: "RandomUser"
        password:
          type: string
          example: "foobar123!"
        email:
          type: string
          example: "example@mail.com"

    status_ok:
      type: object
      properties:
        status:
          type: string
          enum: ["OK"]

    status_failed:
      type: object
      properties:
        status:
          type: string
          enum: ["failed"]

    passesPerStation:
      type: object
      properties:
        Station:
          type: string
          example: "AO17"
        StationOperator:
          type: string
          example: "aodos"
        RequestTimestamp:
          type: string
          example: "2020-09-25 15:33:25"
        PeriodFrom:
          type: string
          example: "2020-05-25 00:00:00"
        PeriodTo:
          type: string
          example: "2021-01-10 23:59:59"
        NumberOfPasses:
          type: array
          items:
            type: object
            properties:
              PassIndex:
                type: integer
                example: 1
              PassID:
                type: string
                example: "WSI3219204"
              PassTimeStamp:
                type: string
                example: "2020-02-17 19:46:27"
              VehicleID:
                type: string
                example: "ED51EWW52190"
              TagProvider:
                type: string
                example: "aodos"
              PassType:
                type: string
                enum: ["home", "visitor"]
                example: "visitor"
              PassCharge:
                type: number
                format: float
                example: 2.8

    passesAnalysis:
      type: object
      properties:
        op1_ID:
          type: string
          example: "AO"
        op2_ID:
          type: string
          example: "EO"
        RequestTimestamp:
          type: string
          example: "2020-07-01 12:39:12"
        PeriodFrom:
          type: string
          example: "2020-05-17 00:00:00"
        PeriodTo:
          type: string
          example: "2020-06-29 23:59:59"
        NumberOfPasses:
          type: integer
          example: 9182
        PassesList:
          type: array
          items:
            type: object
            properties:
              PassIndex:
                type: integer
                example: 1
              PassID:
                type: string
                example: "XNN3133547"
              StationID:
                type: string
                example: "AO17"
              TimeStamp:
                type: string
                example: "2020-05-19 17:59:17"
              VehicleID:
                type: string
                example: "EM54HQI58682"
              Charge:
                type: number
                format: float
                example: 2.8