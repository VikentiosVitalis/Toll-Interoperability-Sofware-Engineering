openapi: 3.0.0
info:
  version: 1.1.0
  title: Softeng 21-18 Toll Interoperability API
  description: >
    REST API supporting the function of an interoperability system  for highway
    toll stations. Created for the purposes of the term  project of the Software
    Engineering course (7th Semester, NTUA).
servers:
  - url: https://localhost:9103/interoperability/api
    description: Development server
security:
  - bearerAuth: []

paths:
  /login:
    post:
      description: >
        Post user login credentials (inputted by user in the login form)  and
        perform identification.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        200:
          description: Successful identification
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The user's authentication token
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlJhbmRvbVVzZXIiLCJlbWFpbCI6InJhbmRvbUB1c2VyLmNvbSIsImlhdCI6MTUxNjIzOTAyMn0.VFq_QK6pzjNvKpm0ju_gbOjB3u3dMjs7EZcUCvSH-Os
        400:
          description: Invalid username or password
        401:
          description: No user found with given credentials
        500:
          description: Internal server error
          
  /logout:
    post:
      description: Perform user logout
      parameters:
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: Successful logout
        401:
          description: Unauthorised user
        500:
          description: Internal server error
          
  /admin/usermod/:
    post:
      description: >
        Add new user or change attributes of existing user.
        Only admin users may access this resource.
      parameters:
        - $ref: '#/components/parameters/customHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usermod'
      responses:
        200:
          description: >
            User added or attributes changed succesfully. The new credentials of
            the user are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usermod'
        400:
          description: Invalid user attributes
        401:
          description: Unauthorised admin
        500:
          description: Internal server error
  
  /admin/users:
    get:
      description: >
        Get data of all users.
        Only admin users may access this resource.
      parameters:
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: Successful fetch of user data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/users'
        401:
          description: Unauthorised admin
        500:
          description: Internal server error

  /admin/users/{username}:
    get:
      description: >
        Get data of user with given username.
        Only admin users may access this resource.
      parameters:
        - name: username
          in: path
          required: true
          description: Username of user whose data should be fetched
          schema:
            type: string
            example: RandomUser
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: Successful fetch of user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        400:
          description: Invalid username
        401:
          description: Unauthorised admin
        402:
          description: User with requested username not found
        500:
          description: Internal server error
          
  /admin/passesupd:
    post:
      description: >
        Post a CSV file containing any number of pass records, one per row.
        Any uploaded records not already in the database will be inserted into it.
        Only admin users may access this resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: >
                    Contents of the posted CSV file
                  example: "GNO5910350,GF26E1328,AO01,2022-01-01 13:15:23,2.8\nGBU5340350,NE74M0871,EG02,2022-01-02 15:17:42,3.1"
      responses:
        200:
          description: >
            Successful post of CSV file and importation of new pass records.
          content:
            application/json:
              schema:
                type: object
                properties:
                  PassesInUploadedFile:
                    type: integer
                    example: 572
                  PassesImported:
                    type: integer
                    example: 563
                  TotalPassesInDatabase:
                    type: integer
                    example: 8731
        400:
          description: Invalid file uploaded
        401:
          description: Unauthorised admin
        500:
          description: Internal server error
          
  /admin/healthcheck:
    get:
      description: >
        Check end-to-end connectivity (between user and database).
      responses:
        200:
          description: Healthcheck successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: >
                      If end-to-end connectivity is established, return "OK",
                      otherwise return "failed".
                    type: string
                    enum:
                      - OK
                      - failed
                  dbconnection:
                    type: string
                    example: >
                      Server=localhost;Database=interoperability;UserId=root;Password=password;
        500:
          description: Internal server error

  /admin/resetadmin:
    post:
      description: >
        Resets the administrator user account to default (username: admin,  password: freepasses4all).
      responses:
        200:
          description: >
            Successful reset of default administrator user account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_ok'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_failed'

  /admin/resetpasses:
    post:
      description: >
        Resets the pass records in the database to default.
      responses:
        200:
          description: >
            Successful reset of pass records to default.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_ok'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_failed'
                
  /admin/resetstations:
    post:
      description: >
        Resets the station records in the database to default.
      responses:
        200:
          description: >
            Successful reset of station records to default.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_ok'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_failed'
                
  /admin/resettags:
    post:
      description: >
        Resets the tag records in the database to default.
      responses:
        200:
          description: |
            Successful reset of tag records to default.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_ok'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_failed'
                
  /admin/resetvehicles:
    post:
      description: >
        Resets the vehicle records in the database to default.
      responses:
        200:
          description: >
            Successful reset of vehicle records to default.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_ok'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_failed'
  
  /GetStationIDs:
    get:
      description: >
        Fetch a list of all station IDs.
        This resource may be accessed by any operator, transportation or admin user.
      responses:
        200:
          description: >
            Successful fetch of station IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  RequestTimestamp:
                    type: string
                    example: '2020-09-25 15:33:25'
                  StationIDList:
                    type: array
                    items:
                      type: string
                      example: "AO10"
        500:
          description: >
            Internal server error

  /GetOperatorIDs:
    get:
      description: >
        Fetch a list of all operator IDs.
        This resource may be accessed by any operator, transportation or admin user.
      responses:
        200:
          description: >
            Successful fetch of operator IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  RequestTimestamp:
                    type: string
                    example: '2020-09-25 15:33:25'
                  OperatorIDList:
                    type: array
                    items:
                      type: string
                      example: "AO"
        500:
          description: >
            Internal server error

  /PassesPerStation/{stationID}/{date_from}/{date_to}:
    get:
      description: >
        Fetch a list of passes that were recorded between specified dates, on
        station with given ID. The passes are returned in ascending time order.
        This resource may be accessed by any operator user whose ID matches the 
        operatorID of the requested station, as well as by any trasnportation or admin user.
      parameters:
        - name: stationID
          in: path
          required: true
          description: ID of station for which passes will be fetched.
          schema:
            type: string
            example: AO17
        - $ref: '#/components/parameters/dateFromParam'
        - $ref: '#/components/parameters/dateToParam'
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: >
            Return list with analytic data for the passes in the specific given
            time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passesPerStation'
            text/csv:
              schema:
                $ref: '#/components/schemas/passesPerStationList'
        400:
          description: Invalid time period or station id
        401:
          description: Unauthorised user
        402:
          description: No records found with the requested parameters
        500:
          description: Internal server error
          
  /PassesAnalysis/{op1_ID}/{op2_ID}/{date_from}/{date_to}:
    get:
      description: >
        Fetch a list of passes that were recorded between specified dates, on
        stations of operator {op1_ID}, in which a tag of operator {op2_ID}  was
        used. The passes are returned in ascending time order.
        This resource may be accessed by any operator user whose ID matches either of
        the operator IDs in the request, as well as by any trasnportation or admin user.
      parameters:
        - $ref: '#/components/parameters/stationOwnerID'
        - $ref: '#/components/parameters/tagOwnerID'
        - $ref: '#/components/parameters/dateFromParam'
        - $ref: '#/components/parameters/dateToParam'
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: Successful fetch of pass record information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passesAnalysis'
            text/csv:
              schema:
                $ref: '#/components/schemas/passesAnalysisList'
        400:
          description: Invalid input parameters (operator IDs or dates)
        401:
          description: Unauthorised user
        402:
          description: No records found with the requested parameters
        500:
          description: Internal server error
          
  /PassesCost/{op1_ID}/{op2_ID}/{date_from}/{date_to}:
    get:
      description: >
        Fetch the number of passes that were recorded between specified dates,
        on stations of operator {op1_ID}, in which a tag of operator {op2_ID} 
        was used. In addition, fetch the total cost of these passes.
        This resource may be accessed by any operator user whose ID matches either of
        the operator IDs in the request, as well as by any admin user.
      parameters:
        - $ref: '#/components/parameters/stationOwnerID'
        - $ref: '#/components/parameters/tagOwnerID'
        - $ref: '#/components/parameters/dateFromParam'
        - $ref: '#/components/parameters/dateToParam'
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: Successful fetch of pass record and total cost information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passesCost'
            text/csv:
              schema:
                $ref: '#/components/schemas/passesCost'
        400:
          description: Invalid input parameters (operator IDs or dates)
        401:
          description: Unauthorised user
        500:
          description: Internal server error
          
  /ChargesBy/{op_ID}/{date_from}/{date_to}:
    get:
      description: >
        Fetch the number of passes that were recorded between specified dates,
        on stations of operator {op_ID}, in which a tag *not* belonging to
        {op_ID} was used. In addition, fetch the total cost of these passes,
        groupped by the operator to whom the tags used belong.
        This resource may be accessed by any operator user whose ID matches either of
        the operator IDs in the request, as well as by any admin user.
      parameters:
        - name: op_ID
          in: path
          required: true
          description: >
            The ID of the owner of the stations for which the pass records will
            be fetched.
          schema:
            type: string
            example: AO
        - $ref: '#/components/parameters/dateFromParam'
        - $ref: '#/components/parameters/dateToParam'
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: Successful fetch of pass record and total cost information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chargesBy'
            text/csv:
              schema:
                $ref: '#/components/schemas/chargesByList'
        400:
          description: Invalid input parameters (operator IDs or dates)
        401:
          description: Unauthorised user
        500:
          description: Internal server error

  /NewSettlement:
    post:
      description: >
        Creates a new settlement record in the database for the debts between the
        two given operators. The settlement accounts for the debts created between
        the last settlement date and the provided date.
        This resource may be accessed by any operator user whose ID matches either of
        the operator IDs in the request, as well as by any admin user.
      parameters:
        - $ref: '#/components/parameters/customHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                op1_ID:
                  type: string
                  example: AO
                op2_ID:
                  type: string
                  example: EG
                date_to:
                  type: string
                  example: '20200117'
      responses:
        200:
          description: >
            Successful calculation of total debts and creation of settlement record in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settlement'
            text/csv:
              schema:
                $ref: '#/components/schemas/settlement'
        400:
          description: Invalid input parameters
        401:
          description: Unauthorised user
        500:
          description: Internal server error

  /SettlementByID/{ID}:
    get:
      description: >
        Fetches a settlement record with the provided ID.
        This resource may be accessed by any payment user and any admin user.
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: string
            example: DNA83N02NC
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: >
            Successful fetch of settlement record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settlement'
            text/csv:
              schema:
                $ref: '#/components/schemas/settlement'
        400:
          description: Invalid input parameters
        401:
          description: Unauthorised user
        402:
          description: No settlement record found with requested ID
        500:
          description: Internal server error

  /SettlementsByOperator/{op_ID}:
    get:
      description: >
        Fetch a list of settlement records concerning the given operator.
        This resource may be accessed by any operator user whose ID matches 
        the operator ID in the request and by any admin user.
      parameters:
        - name: op_ID
          in: path
          required: true
          schema:
            type: string
            example: OO
        - $ref: '#/components/parameters/formatParam'
        - $ref: '#/components/parameters/customHeader'
      responses:
        200:
          description: >
            Successful fetch of settlement record list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settlementsByOperator'
            text/csv:
              schema:
                $ref: '#/components/schemas/settlementList'
        400:
          description: Invalid input parameters
        401:
          description: Unauthorised user
        402:
          description: No settlement records found with requested operator ID
        500:
          description: Internal server error

  /ClearSettlement:
    post:
      description: >
        Mark an existing settlement record as cleared in the database.
        This resource may be accessed by any payment or admin user.
      parameters:
        - $ref: '#/components/parameters/customHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ID:
                  type: string
                  example: DNA83N02NC
      responses:
        200:
          description: Settlement record successfully marked as cleared
        400:
          description: Invalid input parameters
        401:
          description: Unauthorised user
        402:
          description: No settlement record found with requested ID
        500:
          description: Internal server error


          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


  parameters:
    stationOwnerID:
      name: op1_ID
      in: path
      required: true
      description: >
        The ID of the owner of the stations for which the pass records will be
        fetched.
      schema:
        type: string
        example: AO
        
    tagOwnerID:
      name: op2_ID
      in: path
      required: true
      description: >
        The ID of the owner of the tags for which the pass records will be
        fetched.
      schema:
        type: string
        example: EO
        
    dateFromParam:
      name: date_from
      in: path
      required: true
      description: The earliest date of pass records to be fetched in YYYYMMDD format.
      schema:
        type: string
        example: '20200718'
        
    dateToParam:
      name: date_to
      in: path
      required: true
      description: The latest date of pass records to be fetched in YYYYMMDD format.
      schema:
        type: string
        example: '20200818'
        
    formatParam:
      name: format
      in: query
      description: The data format of the response content.
      schema:
        type: string
        enum:
          - json
          - csv
        default: json
        
    customHeader:
      name: X-OBSERVATORY-AUTH
      in: header
      required: true
      description: >
        Custom HTTP header to be sent on each authorised operation. Contains the
        user's authentication token, as returned from the login operation.
      schema:
        type: string
        example: >
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
          eyJ1c2VybmFtZSI6IlJhbmRvbVVzZXIiLCJlbWFpbCI6InJhbmRvbUB1c2VyLmNvbSIsImlhdCI6MTUxNjIzOTAyMn0.
          VFq_QK6pzjNvKpm0ju_gbOjB3u3dMjs7EZcUCvSH-Os
          
  schemas:
    login:
      type: object
      properties:
        username:
          type: string
          example: aodos
        password:
          type: string
          example: foobar123!

    usermod:
      type: object
      properties:
        username:
          type: string
          example: aodos
        password:
          type: string
          example: foobar123!
        type:
          description: >
            Indicates whether the user is an Operator, Transportation authority official,
            Payment service provider or Administrator
          type: string
          enum: ['operator', 'transportation', 'payment', 'admin']
        operatorID:
          description: >
            If the user is an operator, this should equal the operator's ID, otherwise it
            should be null.
          type: string
          nullable: true
          example: "AO"
    
    users:
      type: object
      properties:
        username:
          type: string
          example: aodos
        type:
          description: >
            Indicates whether the user is an Operator, Transportation authority official,
            Payment service provider or Administrator
          type: string
          enum: ['operator', 'transportation', 'payment', 'admin']
        operatorID:
          description: >
            If the user is an operator, this should equal the operator's ID, otherwise it
            should be null.
          type: string
          nullable: true
          example: "AO"
          
    status_ok:
      type: object
      properties:
        status:
          type: string
          enum:
            - OK
            
    status_failed:
      type: object
      properties:
        status:
          type: string
          enum:
            - failed
        details:
          type: string
          example: Optional failure details
          
    passesPerStationList:
      type: array
      items:
        type: object
        properties:
          PassIndex:
            type: integer
            example: 1
          PassID:
            type: string
            example: WSI3219204
          PassTimeStamp:
            type: string
            example: '2020-02-17 19:46:27'
          VehicleID:
            type: string
            example: ED51EWW52190
          TagProvider:
            type: string
            example: aodos
          PassType:
            type: string
            enum:
              - home
              - visitor
            example: visitor
          PassCharge:
            type: number
            format: float
            example: 2.8
            
    passesPerStation:
      type: object
      properties:
        Station:
          type: string
          example: AO17
        StationOperator:
          type: string
          example: aodos
        RequestTimestamp:
          type: string
          example: '2020-09-25 15:33:25'
        PeriodFrom:
          type: string
          example: '2020-05-25 00:00:00'
        PeriodTo:
          type: string
          example: '2021-01-10 23:59:59'
        NumberOfPasses:
          type: integer
          example: 1359
        PassesList:
          $ref: '#/components/schemas/passesPerStationList'
          
    passesAnalysisList:
      type: array
      items:
        type: object
        properties:
          PassIndex:
            type: integer
            example: 1
          PassID:
            type: string
            example: XNN3133547
          StationID:
            type: string
            example: AO17
          TimeStamp:
            type: string
            example: '2020-05-19 17:59:17'
          VehicleID:
            type: string
            example: EM54HQI58682
          Charge:
            type: number
            format: float
            example: 2.8
            
    passesAnalysis:
      type: object
      properties:
        op1_ID:
          type: string
          example: AO
        op2_ID:
          type: string
          example: EO
        RequestTimestamp:
          type: string
          example: '2020-07-01 12:39:12'
        PeriodFrom:
          type: string
          example: '2020-05-17 00:00:00'
        PeriodTo:
          type: string
          example: '2020-06-29 23:59:59'
        NumberOfPasses:
          type: integer
          example: 9182
        PassesList:
          $ref: '#/components/schemas/passesAnalysisList'
          
    passesCost:
      type: object
      properties:
        op1_ID:
          type: string
          example: AO
        op2_ID:
          type: string
          example: EO
        RequestTimestamp:
          type: string
          example: '2020-07-02 12:39:12'
        PeriodFrom:
          type: string
          example: '2020-06-01 00:00:00'
        PeriodTo:
          type: string
          example: '2020-06-30 23:59:59'
        NumberOfPasses:
          type: integer
          example: 3452
        PassesCost:
          type: number
          format: float
          example: 15242.82
          
    chargesByList:
      type: array
      items:
        type: object
        properties:
          VisitingOperator:
            type: string
            example: EO
          NumberOfPasses:
            type: integer
            example: 2398
          PassesCost:
            type: number
            format: float
            example: 13017.91
            
    chargesBy:
      type: object
      properties:
        op_ID:
          type: string
          example: AO
        RequestTimestamp:
          type: string
          example: '2020-08-02 09:00:12'
        PeriodFrom:
          type: string
          example: '2020-07-01 00:00:00'
        PeriodTo:
          type: string
          example: '2020-07-31 23:59:59'
        PPOList:
          $ref: '#/components/schemas/chargesByList'

    settlement:
      type: object
      properties:
        RequestTimestamp:
          type: string
          example: '2021-01-04 20:32:42'
        SettlementID:
          type: string
          example: 'FN30GB1D8X'
        OperatorCredited:
          type: string
          example: 'EG'
        OperatorDebited:
          type: string
          example: 'GF'
        DateFrom:
          type: string
          example: '2019-01-01 00:00:00'
        DateTo:
          type: string
          example: '2019-01-31 23:59:59'
        Amount:
          type: number
          format: float
          example: 58.95
        Cleared:
          type: boolean
          example: false

    settlementList:
      type: array
      items:
        type: object
        properties:
          SettlementID:
            type: string
            example: 'FN30GB1D8X'
          OperatorCredited:
            type: string
            example: 'EG'
          OperatorDebited:
            type: string
            example: 'GF'
          DateFrom:
            type: string
            example: '2019-01-01 00:00:00'
          DateTo:
            type: string
            example: '2019-01-31 23:59:59'
          Amount:
            type: number
            format: float
            example: 58.95
          Cleared:
            type: boolean
            example: false
    
    settlementsByOperator:
      type: object
      properties:
        RequestTimestamp:
          type: string
          example: '2021-01-04 20:32:42'
        SettlementList:
          $ref: '#/components/schemas/settlementList'
